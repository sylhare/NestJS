import { INestApplication, Logger } from '@nestjs/common';
import { Test, TestingModule } from '@nestjs/testing';
import { AppModule } from '../../../src/app.module';
import * as request from 'supertest';
import { gql } from 'graphql-tag';
import { print } from 'graphql';
import { AppTestingModuleWithLimiter } from '../utils/AppTestingModule';

describe('GraphQL Vulnerability', () => {
  let app: INestApplication;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppTestingModuleWithLimiter],
    })
      .setLogger(new Logger())
      .compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  afterEach(async () => {
    await app.close();
  });

  it('handles empty query', async () => {
    const payload = await request(app.getHttpServer())
      .post('/graphql')
      .send({
        user: 'user',
      });
    expect(payload.status).toEqual(400);
  });

  it('Directive Overloading', async () => {
    const payload = await request(app.getHttpServer())
      .post('/graphql')
      .send({
        user: 'user',
        query: print(gql`
          query {
            codeFirst(id: 1) {
              __typename
              @aa@aa@aa@aa@aa@aa@aa@aa@aa@aa
            }
          }
        `),
      });
    expect(payload.status).toEqual(400);
    expect(payload.body.errors[0].message).toMatch(/Unknown directive/);
  });

  it('Field Duplication with Fragments', async () => {
    const payload = await request(app.getHttpServer())
      .post('/graphql')
      .send({
        user: 'user',
        query: print(gql`
              fragment codeFirst on CodeFirst {
                __typename
                __typename
              }
              query {
                codeFirst(id: 1) {
                  __typename
                  __typename
                  ...codeFirst
                  ... on CodeFirst {
                    __typename
                    __typename
                  }
                }
              }
            `),
      });
    expect(payload.status).toEqual(200);
    expect(payload.body).toEqual({ 'data': { 'codeFirst': { '__typename': 'CodeFirst' } } });
  });

  it('Field Duplication', async () => {
    const payload = await request(app.getHttpServer())
      .post('/graphql')
      .send({
        user: 'user',
        query: '{ codeFirst(id: 1) { __typename __typename __typename __typename __typename __typename __typename } }',
      });
    expect(payload.status).toEqual(200);
    expect(payload.body).toEqual({ 'data': { 'codeFirst': { '__typename': 'CodeFirst' } } });
  });

  it('Depth limit', async () => {
    const payload = await request(app.getHttpServer())
      .post('/graphql')
      .send({
        user: 'user',
        query: `
          query {
            book(id: 1) {
              id
              author {
                books {
                  author {
                    books {
                      title
                      author {
                        name
                      }
                    }
                  }
                }
              }
            }
          }
        `,
      });
    expect(payload.status).toEqual(200);
    expect(payload.body).toEqual({
      'data': {
        'book': {
          'author': {
            'books': [{
              'author': {
                'books': [{
                  'author': { 'name': 'author' },
                  'title': 'title',
                }, { 'author': { 'name': 'author' }, 'title': 'title' }],
              },
            }, {
              'author': {
                'books': [{
                  'author': { 'name': 'author' },
                  'title': 'title',
                }, { 'author': { 'name': 'author' }, 'title': 'title' }],
              },
            }],
          }, 'id': 1,
        },
      },
    });
  });

  it('Alias Overloading', async () => {
    const payload = await request(app.getHttpServer())
      .post('/graphql')
      .send({
        user: 'user',
        query: '{ codeFirst(id: 1) { __typename  alias:__typename alias2:__typename alias3:__typename alias4: __typename } }',
      });
    expect(payload.status).toEqual(200);
    expect(payload.body).toEqual({
      'data': {
        'codeFirst': {
          '__typename': 'CodeFirst',
          'alias': 'CodeFirst',
          'alias2': 'CodeFirst',
          'alias3': 'CodeFirst',
          'alias4': 'CodeFirst',
        },
      },
    });
  });

  it('Batching Overloading', async () => {
    const payload = await request(app.getHttpServer())
      .post('/graphql')
      .send([{
        query: `
          query { codeFirst(id: 1) { __typename } }
        `,
      },
      {
        query: `
          query { codeFirst(id: 2) { __typename } }
        `,
      }]);
    expect(payload.status).toEqual(200);
    expect(payload.body).toEqual([{ 'data': { 'codeFirst': { '__typename': 'CodeFirst' } } }, { 'data': { 'codeFirst': { '__typename': 'CodeFirst' } } }]);
  });
});